package ProjectEuler;

/**
 * <h1>Problem 12</h1>
 *
 * <p>
 *
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be<br>
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.<br>
 * The first ten terms would be:<br>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...<br>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1<br>
 * 3: 1,3<br>
 * 6: 1,2,3,6<br>
 * 10: 1,2,5,10<br>
 * 15: 1,3,5,15<br>
 * 21: 1,3,7,21<br>
 * 28: 1,2,4,7,14,28
 * <p>
 * We can see that 28 is the first triangle number to have over five divisors.<br>
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * <hr>
 * 
 * <h2>Notes:</h2>
 * It seems like we have only two facts we can use to speed this problem up.<br>
 * First, the Nth triangular number is given by Tri(N) = N(N+1) / 2.<br>
 * Second, if N has k distinct prime factors with multiplicities m1,m2,...,mk, then N has (m1+1)(m2+1)...(mk+1)
 * unique factors.
 * <p>
 * From the above, the number of factors in N(N+1) is (# of factors of N)(# of factors of N+1). Thus, the number of
 * factors in T(N) is ((# of factors of N) - 1)(# of factors of N+1) to account for the division by two, assuming that N
 * is the even factor. The formula if N is odd is obvious.
 * 
 * <p>
 *
 * @author Stephen Broughton
 * @since Aug 12, 2018
 */
public class Problem012 {

    public static void main(String[] args) {
        long n = 2;
        boolean even = true;
        int nFactors = 1;
        for (; true; n++) {
            int nPlusOneFactors = factor(n + 1);
            if (nFactors * nPlusOneFactors > 500) break;
            nFactors = nPlusOneFactors;
            even = !even;
        }
        System.out.println(n * (n + 1) / 2);
    }

    public static int factor(long n) {
        int count = 1;
        int exp = (n % 2 == 0) ? -1 : 0;  // If n is even, we reduce the exponent on the 2 factor by 1 to account for
                                          // dividing by 2 in the triangular number formula.
        for (long i = 2; i <= n; i++) {
            for (; n % i == 0; n /= i)
                exp++;
            if (exp != 0) count *= ++exp;
            exp = 0;
        }
        return count;
    }
}
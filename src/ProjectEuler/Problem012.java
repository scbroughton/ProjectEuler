package ProjectEuler;

/**
 * <h1>Problem 12</h1>
 *
 * <p>
 *
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be<br>
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.<br>
 * The first ten terms would be:<br>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...<br>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1<br>
 * 3: 1,3<br>
 * 6: 1,2,3,6<br>
 * 10: 1,2,5,10<br>
 * 15: 1,3,5,15<br>
 * 21: 1,3,7,21<br>
 * 28: 1,2,4,7,14,28
 * <p>
 * We can see that 28 is the first triangle number to have over five divisors.<br>
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * <hr>
 * 
 * <h2>Notes:</h2>
 * It seems like we have only two facts we can use to speed this problem up.<br>
 * First, the Nth triangular number is given by Tri(N) = N(N+1) / 2.<br>
 * Second, if N has k non-distinct prime factors with multiplicities m1,m2,...,mk, then N has 2^k / (m1!m2!...mk!)
 * unique factors.
 * <p>
 * From this second fact, we can ascertain that the number we're looking for must have at least 9 prime factors and must
 * be at least as large as 2*3*5*7*11*13*17*19*23 = 223,092,870.<br>
 * Plugging this into the triangular number formula and solving for N, we find that N > 21,122.
 * <p>
 * Here, we need to make a choice:<br>
 * Finding the number of factors for a given Tri(N) will be much faster if we have a table of primes to check against
 * instead of checking every number less than Tri(N) / 2. However, we need to generate this table, effectively
 * losing the time we could save by starting from N = 21,123.
 * 
 * <p>
 *
 * @author Stephen Broughton
 * @since Aug 5, 2018
 */
public class Problem012 {

    public static void main(String[] args) {
        for (long i = 21123; true; i++) {
            int count = 0;
            long num = (i * (i + 1)) / 2;
            for (long j = 1; j < num / 2; j++)
                if (num % j == 0) count++;
            System.out.println(num);
            if (count + 1 > 500) break;
        }
    }
}